%# Copyright (C) 2023 Stefan Schl√∂gl <schinzilord@octarisk.com>
%#
%# This program is free software; you can redistribute it and/or modify it under
%# the terms of the GNU General Public License as published by the Free Software
%# Foundation; either version 3 of the License, or (at your option) any later
%# version.
%#
%# This program is distributed in the hope that it will be useful, but WITHOUT
%# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
%# details.
%#
%# You should have received a copy of the GNU General Public License along with
%# this program; if not, see <http://www.gnu.org/licenses/>.
 
%# -*- texinfo -*-
%# @deftypefn {Function File} {[@var{success_tests} @var{total_tests}] =} test_report_files(@var{path})
%#
%# End-to-end test (hash comparison) for report files generated by octarisk.
%# 
%# @end deftypefn

function [success_tests,total_tests] = test_report_files(path)

path_reports = strcat(path,'/output/reports');

hash_algo = "md5";
saveflag = 0;
hashtable = struct();

% hash all files in folder and compare outcome
files = dir(path_reports);
no_files = length(files);
if no_files == 0
	fprintf('test_report_files: no files found to compare in folder: >>%s<<\n',path_reports);
else	
	try
		for ii = 1 : 1 : length(files)
			tmp_file = files(ii).name;
			if ( length(tmp_file) > 3 )
				filetype = tmp_file(end-2:end);
				% generate md5sum 
				tmp_filepath 	= strcat(path_reports,'/',tmp_file);
				if (strcmpi(filetype,'tex') || strcmpi(filetype,'dot') || strcmpi(filetype,'png') || strcmpi(filetype,'dot'))
					tmp_hash  = hash(hash_algo, fileread(tmp_filepath));
					hashtable = setfield(hashtable, tmp_file, tmp_hash);
				end
			end
		end
	catch
		fprintf('test_report_files: there was an error: %s\n',lasterr);
	end
	if saveflag
		save_file = strcat(path,'/hashtable.dat')
		save("-text", save_file, 'hashtable');
	end	
end
		    
   
% load hashtable and compare hashes
ref_filepath = strcat(path,'/hashtable.dat');
try
	hashtable_ref = load(ref_filepath);
	hashtable_ref = getfield(hashtable_ref,'hashtable'); %getfield(hashtable_ref, 'hashtable');
	[success_tests,total_tests] = compare_struct(hashtable_ref,hashtable);
catch
	fprintf('WARNING: File >>%s<< not found. Aborting.\n',ref_filepath);
	success_tests = 0;
	total_tests = 0;
end

    
end



% ------------------------------------------------------------------------------
%                               Helper Function
% ------------------------------------------------------------------------------
function [similiar,total_tests] = compare_struct(s,t)
    % Compare all elements of two hash structures.
    retcode = 0;
    deviation = 0;
    similiar = 0;
    fn = fieldnames(s);
    % loop through all objects
    for ii = 1 : 1 : length(fn)
        tmp_field = fn{ii};
        if isfield(t,tmp_field)
			if isequal(getfield(s,tmp_field),getfield(t,tmp_field))
				similiar = similiar + 1;
				fprintf('SUCCESS: File >>%s<< is identical.\n',tmp_field);
			else
				deviation = deviation + 1;
				fprintf('WARNING: File >>%s<< is NOT identical.\n',tmp_field);
			end
		else
			fprintf('WARNING: Hash for file >>%s<< not found in generated reports.\n',tmp_field);
			deviation = deviation + 1;
		end
    end
    total_tests = similiar + deviation;
end
